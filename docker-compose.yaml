version: '3.8'

services:
  # Carla server container
  carla_server:
    image: carlasim/carla:0.9.15
    container_name: carla_server
    command: ["/bin/bash", "./CarlaUE4.sh", "-nosound", "-vulkan", "-RenderOffScreen"]
    runtime: nvidia
    privileged: true
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    healthcheck:
      test: ["CMD", "sleep", "5"]
      interval: 5s
      timeout: 10s
      retries: 5

  # Carla ROS bridge container
  carla_ros_bridge:
    build:
      context: ./docker/ros_carla_bridge/
      dockerfile: Dockerfile
    container_name: carla_ros_bridge
    image: carla_ros_bridge:latest
    command: ros2 launch carla_ros_bridge carla_ros_bridge.launch.py host:=carla_server timeout:=30 town:=Town03
    depends_on:
      carla_server:
        condition: service_healthy

  bridge_spawn_objects:
    image: carla_ros_bridge:latest
    container_name: bridge_spawn_objects
    command: ros2 launch carla_spawn_objects carla_spawn_objects.launch.py host:=carla_server objects_definition_file:=/config/objects.json
    volumes:
      - ./config:/config
    depends_on:
      carla_ros_bridge:
        condition: service_started

  control_steering_wheel:
    build:
      context: ./
      dockerfile: docker/control_steering_wheel/Dockerfile
    image: control_steering_wheel:latest
    container_name: control_steering_wheel
    runtime: nvidia
    privileged: true
    environment:
      - DISPLAY=${DISPLAY}
      - SDL_VIDEODRIVER=x11
      - SDL_AUDIODRIVER=waveout
      - QT_X11_NO_MITSHM=1
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./config:/config
    command: ros2 launch control_steering_wheel control_steering_wheel.launch.py host:=carla_server
    depends_on:
      carla_ros_bridge:
        condition: service_started

  ros_mcap_recording:
    build:
      context: ./
      dockerfile: docker/ros_mcap_recording/Dockerfile
    image: ros_mcap_recording:latest
    container_name: ros_mcap_recording
    volumes:
      - ./recording:/home/recording
    command: echo "ROS2 recording container"
    depends_on:
      carla_ros_bridge:
        condition: service_started

  # foxglove to visualize live data
  foxglove_bridge:
    build:
      context: ./docker/foxglove_bridge/
      dockerfile: Dockerfile
    image: foxglove-bridge:latest
    container_name: foxglove_bridge
    command: ros2 launch foxglove_bridge foxglove_bridge_launch.xml port:=8765
    depends_on:
      carla_ros_bridge:
        condition: service_started
    ports:
      - 8765:8765